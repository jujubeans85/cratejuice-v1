name: Create Deploy
on:
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  contents: read
  deployments: write
  id-token: write

jobs:
  create-deployment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create GitHub deployment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          REF="${GITHUB_REF#refs/heads/}"
          echo "Creating deployment for ref: $REF"
          RESPONSE=$(curl -s -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/deployments \
            -d '{"ref":"'"$REF"'", "environment":"production", "required_contexts": [], "transient_environment": false }')
          echo "$RESPONSE" > deployment_response.json
          DEPLOYMENT_ID=$(python - <<'PY'
import json
try:
  j=json.load(open('deployment_response.json'))
  print(j.get('id') or '')
except Exception:
  print('')
PY
)
          if [ -z "$DEPLOYMENT_ID" ]; then
            echo "Failed to create deployment:"
            cat deployment_response.json
            exit 1
          fi
          echo "Deployment created: $DEPLOYMENT_ID"
          echo "DEPLOYMENT_ID=$DEPLOYMENT_ID" >> $GITHUB_ENV

      - name: Set deployment status: in_progress
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEPLOYMENT_ID: ${{ env.DEPLOYMENT_ID }}
        run: |
          curl -s -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/deployments/$DEPLOYMENT_ID/statuses \
            -d '{"state":"in_progress"}' > /dev/null

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm ci

      - name: Run tests
        run: |
          npm test

      - name: Build
        run: |
          npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Sync build to S3
        run: |
          aws s3 sync build/ s3://${{ secrets.S3_BUCKET }} --delete

      - name: Invalidate CloudFront (optional)
        if: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID != '' }}
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"

      - name: Set deployment status: success
        if: ${{ success() }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEPLOYMENT_ID: ${{ env.DEPLOYMENT_ID }}
        run: |
          curl -s -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/deployments/$DEPLOYMENT_ID/statuses \
            -d '{"state":"success"}' > /dev/null